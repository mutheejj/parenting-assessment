require('dotenv').config(); // Load environment variables

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const nodemailer = require('nodemailer');
const PDFDocument = require('pdfkit');
const { PassThrough } = require('stream');

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(bodyParser.json({ limit: '10mb' }));

// Check if required environment variables are set
if (!process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
  console.error('Email credentials are not set in the environment variables.');
  process.exit(1); // Exit the application if credentials are missing
}

// Configure the SMTP transporter
const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: process.env.EMAIL_PORT,
  secure: false, // Brevo uses STARTTLS, so secure should be false
  auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD
  }
});


app.post('/send-email', async (req, res) => {
  try {
    const { recipientEmail, subject, results } = req.body;

    if (!recipientEmail) {
      return res.status(400).json({ error: 'Recipient email is required' });
    }

    // Create a PDF document
    const pdfDoc = new PDFDocument({
      margins: { top: 50, left: 50, right: 50, bottom: 50 },
    });

    const pdfBuffer = await new Promise((resolve, reject) => {
      const chunks = [];
      pdfDoc.on('data', chunk => chunks.push(chunk));
      pdfDoc.on('end', () => resolve(Buffer.concat(chunks)));
      pdfDoc.on('error', reject); // Handle PDF generation errors

      // Header
      pdfDoc
        .fontSize(18)
        .fillColor('#1D3557') // Dark blue
        .text('Parenting Assessment Report', { align: 'center', underline: true })
        .moveDown(2);

      // Subheading
      pdfDoc
        .fontSize(14)
        .fillColor('#457B9D') // Light blue
        .text('Congratulations! Here are your results:', { align: 'left' })
        .moveDown(1);

      // Display Results (Dynamic from request body)
      pdfDoc.fontSize(12).fillColor('black');
      if (Array.isArray(results) && results.length > 0) {
        pdfDoc.list(results, { bulletRadius: 3 });
      } else {
        pdfDoc.text('No results provided.');
      }

      pdfDoc.moveDown(2);

      // Footer
      pdfDoc
        .fillColor('gray')
        .fontSize(10)
        .text('Generated by Parenting Assessment Tool', { align: 'center' })
        .text('Â© 2025 All Rights Reserved', { align: 'center' });

      pdfDoc.end();
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipientEmail,
      subject: subject || 'Your Parenting Assessment Results',
      text: 'Please find your parenting assessment results attached.',
      attachments: [
        {
          filename: 'parenting-assessment-results.pdf',
          content: pdfBuffer,
          contentType: 'application/pdf'
        }
      ]
    };

    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: 'Email sent successfully' });
  } catch (error) {
    console.error('Error sending email:', error.message);
    res.status(500).json({ error: 'Failed to send email' });
  }
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});